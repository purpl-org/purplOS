// Copyright (c) 2018 Anki, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License in the file LICENSE.txt or at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// External interface for robot <-> app and robot <-> sdk communication
// about the robot's navigational memory map.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: nav_map.proto

package Anki_Vector_external_interface

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Every tile in the nav map will be tagged with a content key referring to
// the different environmental elements that Vector can identify.
type NavNodeContentType int32

const (
	NavNodeContentType_NAV_NODE_UNKNOWN                     NavNodeContentType = 0
	NavNodeContentType_NAV_NODE_CLEAR_OF_OBSTACLE           NavNodeContentType = 1
	NavNodeContentType_NAV_NODE_CLEAR_OF_CLIFF              NavNodeContentType = 2
	NavNodeContentType_NAV_NODE_OBSTACLE_CUBE               NavNodeContentType = 3
	NavNodeContentType_NAV_NODE_OBSTACLE_PROXIMITY          NavNodeContentType = 4
	NavNodeContentType_NAV_NODE_OBSTACLE_PROXIMITY_EXPLORED NavNodeContentType = 5
	NavNodeContentType_NAV_NODE_OBSTACLE_UNRECOGNIZED       NavNodeContentType = 6
	NavNodeContentType_NAV_NODE_CLIFF                       NavNodeContentType = 7
	NavNodeContentType_NAV_NODE_INTERESTING_EDGE            NavNodeContentType = 8
	NavNodeContentType_NAV_NODE_NON_INTERESTING_EDGE        NavNodeContentType = 9
)

// Enum value maps for NavNodeContentType.
var (
	NavNodeContentType_name = map[int32]string{
		0: "NAV_NODE_UNKNOWN",
		1: "NAV_NODE_CLEAR_OF_OBSTACLE",
		2: "NAV_NODE_CLEAR_OF_CLIFF",
		3: "NAV_NODE_OBSTACLE_CUBE",
		4: "NAV_NODE_OBSTACLE_PROXIMITY",
		5: "NAV_NODE_OBSTACLE_PROXIMITY_EXPLORED",
		6: "NAV_NODE_OBSTACLE_UNRECOGNIZED",
		7: "NAV_NODE_CLIFF",
		8: "NAV_NODE_INTERESTING_EDGE",
		9: "NAV_NODE_NON_INTERESTING_EDGE",
	}
	NavNodeContentType_value = map[string]int32{
		"NAV_NODE_UNKNOWN":                     0,
		"NAV_NODE_CLEAR_OF_OBSTACLE":           1,
		"NAV_NODE_CLEAR_OF_CLIFF":              2,
		"NAV_NODE_OBSTACLE_CUBE":               3,
		"NAV_NODE_OBSTACLE_PROXIMITY":          4,
		"NAV_NODE_OBSTACLE_PROXIMITY_EXPLORED": 5,
		"NAV_NODE_OBSTACLE_UNRECOGNIZED":       6,
		"NAV_NODE_CLIFF":                       7,
		"NAV_NODE_INTERESTING_EDGE":            8,
		"NAV_NODE_NON_INTERESTING_EDGE":        9,
	}
)

func (x NavNodeContentType) Enum() *NavNodeContentType {
	p := new(NavNodeContentType)
	*p = x
	return p
}

func (x NavNodeContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NavNodeContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_nav_map_proto_enumTypes[0].Descriptor()
}

func (NavNodeContentType) Type() protoreflect.EnumType {
	return &file_nav_map_proto_enumTypes[0]
}

func (x NavNodeContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NavNodeContentType.Descriptor instead.
func (NavNodeContentType) EnumDescriptor() ([]byte, []int) {
	return file_nav_map_proto_rawDescGZIP(), []int{0}
}

// An individual sample of vector's nav map.  This quad's size will vary and
// depends on the resolution the map requires to effectively identify
// boundaries in the environment.
type NavMapQuadInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Content       NavNodeContentType     `protobuf:"varint,1,opt,name=content,proto3,enum=Anki.Vector.external_interface.NavNodeContentType" json:"content,omitempty"`
	Depth         uint32                 `protobuf:"varint,2,opt,name=depth,proto3" json:"depth,omitempty"`
	ColorRgba     uint32                 `protobuf:"varint,3,opt,name=color_rgba,json=colorRgba,proto3" json:"color_rgba,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NavMapQuadInfo) Reset() {
	*x = NavMapQuadInfo{}
	mi := &file_nav_map_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NavMapQuadInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavMapQuadInfo) ProtoMessage() {}

func (x *NavMapQuadInfo) ProtoReflect() protoreflect.Message {
	mi := &file_nav_map_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavMapQuadInfo.ProtoReflect.Descriptor instead.
func (*NavMapQuadInfo) Descriptor() ([]byte, []int) {
	return file_nav_map_proto_rawDescGZIP(), []int{0}
}

func (x *NavMapQuadInfo) GetContent() NavNodeContentType {
	if x != nil {
		return x.Content
	}
	return NavNodeContentType_NAV_NODE_UNKNOWN
}

func (x *NavMapQuadInfo) GetDepth() uint32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *NavMapQuadInfo) GetColorRgba() uint32 {
	if x != nil {
		return x.ColorRgba
	}
	return 0
}

// General information about the nav map as a whole.
type NavMapInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RootDepth     int32                  `protobuf:"varint,1,opt,name=root_depth,json=rootDepth,proto3" json:"root_depth,omitempty"`
	RootSizeMm    float32                `protobuf:"fixed32,2,opt,name=root_size_mm,json=rootSizeMm,proto3" json:"root_size_mm,omitempty"`
	RootCenterX   float32                `protobuf:"fixed32,3,opt,name=root_center_x,json=rootCenterX,proto3" json:"root_center_x,omitempty"`
	RootCenterY   float32                `protobuf:"fixed32,4,opt,name=root_center_y,json=rootCenterY,proto3" json:"root_center_y,omitempty"`
	RootCenterZ   float32                `protobuf:"fixed32,5,opt,name=root_center_z,json=rootCenterZ,proto3" json:"root_center_z,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NavMapInfo) Reset() {
	*x = NavMapInfo{}
	mi := &file_nav_map_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NavMapInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavMapInfo) ProtoMessage() {}

func (x *NavMapInfo) ProtoReflect() protoreflect.Message {
	mi := &file_nav_map_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavMapInfo.ProtoReflect.Descriptor instead.
func (*NavMapInfo) Descriptor() ([]byte, []int) {
	return file_nav_map_proto_rawDescGZIP(), []int{1}
}

func (x *NavMapInfo) GetRootDepth() int32 {
	if x != nil {
		return x.RootDepth
	}
	return 0
}

func (x *NavMapInfo) GetRootSizeMm() float32 {
	if x != nil {
		return x.RootSizeMm
	}
	return 0
}

func (x *NavMapInfo) GetRootCenterX() float32 {
	if x != nil {
		return x.RootCenterX
	}
	return 0
}

func (x *NavMapInfo) GetRootCenterY() float32 {
	if x != nil {
		return x.RootCenterY
	}
	return 0
}

func (x *NavMapInfo) GetRootCenterZ() float32 {
	if x != nil {
		return x.RootCenterZ
	}
	return 0
}

// Requests nav map data from the robot at a specified maximum update frequency.
// Responses in the nav map stream may be sent less frequently if the robot does
// not consider there to be relevant new information.
type NavMapFeedRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Frequency     float32                `protobuf:"fixed32,1,opt,name=frequency,proto3" json:"frequency,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NavMapFeedRequest) Reset() {
	*x = NavMapFeedRequest{}
	mi := &file_nav_map_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NavMapFeedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavMapFeedRequest) ProtoMessage() {}

func (x *NavMapFeedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nav_map_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavMapFeedRequest.ProtoReflect.Descriptor instead.
func (*NavMapFeedRequest) Descriptor() ([]byte, []int) {
	return file_nav_map_proto_rawDescGZIP(), []int{2}
}

func (x *NavMapFeedRequest) GetFrequency() float32 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

// A full nav map sent from the robot.  It contains an origin_id that
// which can be compared against the robot's current origin_id, general
// info about the map, and a collection of quads representing the map's
// content.
type NavMapFeedResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OriginId      uint32                 `protobuf:"varint,1,opt,name=origin_id,json=originId,proto3" json:"origin_id,omitempty"`
	MapInfo       *NavMapInfo            `protobuf:"bytes,2,opt,name=map_info,json=mapInfo,proto3" json:"map_info,omitempty"`
	QuadInfos     []*NavMapQuadInfo      `protobuf:"bytes,3,rep,name=quad_infos,json=quadInfos,proto3" json:"quad_infos,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NavMapFeedResponse) Reset() {
	*x = NavMapFeedResponse{}
	mi := &file_nav_map_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NavMapFeedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavMapFeedResponse) ProtoMessage() {}

func (x *NavMapFeedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nav_map_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavMapFeedResponse.ProtoReflect.Descriptor instead.
func (*NavMapFeedResponse) Descriptor() ([]byte, []int) {
	return file_nav_map_proto_rawDescGZIP(), []int{3}
}

func (x *NavMapFeedResponse) GetOriginId() uint32 {
	if x != nil {
		return x.OriginId
	}
	return 0
}

func (x *NavMapFeedResponse) GetMapInfo() *NavMapInfo {
	if x != nil {
		return x.MapInfo
	}
	return nil
}

func (x *NavMapFeedResponse) GetQuadInfos() []*NavMapQuadInfo {
	if x != nil {
		return x.QuadInfos
	}
	return nil
}

var File_nav_map_proto protoreflect.FileDescriptor

const file_nav_map_proto_rawDesc = "" +
	"\n" +
	"\rnav_map.proto\x12\x1eAnki.Vector.external_interface\"\x93\x01\n" +
	"\x0eNavMapQuadInfo\x12L\n" +
	"\acontent\x18\x01 \x01(\x0e22.Anki.Vector.external_interface.NavNodeContentTypeR\acontent\x12\x14\n" +
	"\x05depth\x18\x02 \x01(\rR\x05depth\x12\x1d\n" +
	"\n" +
	"color_rgba\x18\x03 \x01(\rR\tcolorRgba\"\xb9\x01\n" +
	"\n" +
	"NavMapInfo\x12\x1d\n" +
	"\n" +
	"root_depth\x18\x01 \x01(\x05R\trootDepth\x12 \n" +
	"\froot_size_mm\x18\x02 \x01(\x02R\n" +
	"rootSizeMm\x12\"\n" +
	"\rroot_center_x\x18\x03 \x01(\x02R\vrootCenterX\x12\"\n" +
	"\rroot_center_y\x18\x04 \x01(\x02R\vrootCenterY\x12\"\n" +
	"\rroot_center_z\x18\x05 \x01(\x02R\vrootCenterZ\"1\n" +
	"\x11NavMapFeedRequest\x12\x1c\n" +
	"\tfrequency\x18\x01 \x01(\x02R\tfrequency\"\xc7\x01\n" +
	"\x12NavMapFeedResponse\x12\x1b\n" +
	"\torigin_id\x18\x01 \x01(\rR\boriginId\x12E\n" +
	"\bmap_info\x18\x02 \x01(\v2*.Anki.Vector.external_interface.NavMapInfoR\amapInfo\x12M\n" +
	"\n" +
	"quad_infos\x18\x03 \x03(\v2..Anki.Vector.external_interface.NavMapQuadInfoR\tquadInfos*\xc8\x02\n" +
	"\x12NavNodeContentType\x12\x14\n" +
	"\x10NAV_NODE_UNKNOWN\x10\x00\x12\x1e\n" +
	"\x1aNAV_NODE_CLEAR_OF_OBSTACLE\x10\x01\x12\x1b\n" +
	"\x17NAV_NODE_CLEAR_OF_CLIFF\x10\x02\x12\x1a\n" +
	"\x16NAV_NODE_OBSTACLE_CUBE\x10\x03\x12\x1f\n" +
	"\x1bNAV_NODE_OBSTACLE_PROXIMITY\x10\x04\x12(\n" +
	"$NAV_NODE_OBSTACLE_PROXIMITY_EXPLORED\x10\x05\x12\"\n" +
	"\x1eNAV_NODE_OBSTACLE_UNRECOGNIZED\x10\x06\x12\x12\n" +
	"\x0eNAV_NODE_CLIFF\x10\a\x12\x1d\n" +
	"\x19NAV_NODE_INTERESTING_EDGE\x10\b\x12!\n" +
	"\x1dNAV_NODE_NON_INTERESTING_EDGE\x10\tB Z\x1eAnki.Vector.external_interfaceb\x06proto3"

var (
	file_nav_map_proto_rawDescOnce sync.Once
	file_nav_map_proto_rawDescData []byte
)

func file_nav_map_proto_rawDescGZIP() []byte {
	file_nav_map_proto_rawDescOnce.Do(func() {
		file_nav_map_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_nav_map_proto_rawDesc), len(file_nav_map_proto_rawDesc)))
	})
	return file_nav_map_proto_rawDescData
}

var file_nav_map_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_nav_map_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_nav_map_proto_goTypes = []any{
	(NavNodeContentType)(0),    // 0: Anki.Vector.external_interface.NavNodeContentType
	(*NavMapQuadInfo)(nil),     // 1: Anki.Vector.external_interface.NavMapQuadInfo
	(*NavMapInfo)(nil),         // 2: Anki.Vector.external_interface.NavMapInfo
	(*NavMapFeedRequest)(nil),  // 3: Anki.Vector.external_interface.NavMapFeedRequest
	(*NavMapFeedResponse)(nil), // 4: Anki.Vector.external_interface.NavMapFeedResponse
}
var file_nav_map_proto_depIdxs = []int32{
	0, // 0: Anki.Vector.external_interface.NavMapQuadInfo.content:type_name -> Anki.Vector.external_interface.NavNodeContentType
	2, // 1: Anki.Vector.external_interface.NavMapFeedResponse.map_info:type_name -> Anki.Vector.external_interface.NavMapInfo
	1, // 2: Anki.Vector.external_interface.NavMapFeedResponse.quad_infos:type_name -> Anki.Vector.external_interface.NavMapQuadInfo
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_nav_map_proto_init() }
func file_nav_map_proto_init() {
	if File_nav_map_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_nav_map_proto_rawDesc), len(file_nav_map_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nav_map_proto_goTypes,
		DependencyIndexes: file_nav_map_proto_depIdxs,
		EnumInfos:         file_nav_map_proto_enumTypes,
		MessageInfos:      file_nav_map_proto_msgTypes,
	}.Build()
	File_nav_map_proto = out.File
	file_nav_map_proto_goTypes = nil
	file_nav_map_proto_depIdxs = nil
}
