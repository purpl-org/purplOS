// Copyright (c) 2018 Anki, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License in the file LICENSE.txt or at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Alexa messages

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: alexa.proto

package Anki_Vector_external_interface

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AlexaAuthState int32

const (
	// Invalid/error/versioning issue
	AlexaAuthState_ALEXA_AUTH_INVALID AlexaAuthState = 0
	// Not opted in, or opt-in attempted but failed
	AlexaAuthState_ALEXA_AUTH_UNINITIALIZED AlexaAuthState = 1
	// Opted in, and attempting to authorize
	AlexaAuthState_ALEXA_AUTH_REQUESTING_AUTH AlexaAuthState = 2
	// Opted in, and waiting on the user to enter a code
	AlexaAuthState_ALEXA_AUTH_WAITING_FOR_CODE AlexaAuthState = 3
	// Opted in, and authorized / in use
	AlexaAuthState_ALEXA_AUTH_AUTHORIZED AlexaAuthState = 4
)

// Enum value maps for AlexaAuthState.
var (
	AlexaAuthState_name = map[int32]string{
		0: "ALEXA_AUTH_INVALID",
		1: "ALEXA_AUTH_UNINITIALIZED",
		2: "ALEXA_AUTH_REQUESTING_AUTH",
		3: "ALEXA_AUTH_WAITING_FOR_CODE",
		4: "ALEXA_AUTH_AUTHORIZED",
	}
	AlexaAuthState_value = map[string]int32{
		"ALEXA_AUTH_INVALID":          0,
		"ALEXA_AUTH_UNINITIALIZED":    1,
		"ALEXA_AUTH_REQUESTING_AUTH":  2,
		"ALEXA_AUTH_WAITING_FOR_CODE": 3,
		"ALEXA_AUTH_AUTHORIZED":       4,
	}
)

func (x AlexaAuthState) Enum() *AlexaAuthState {
	p := new(AlexaAuthState)
	*p = x
	return p
}

func (x AlexaAuthState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlexaAuthState) Descriptor() protoreflect.EnumDescriptor {
	return file_alexa_proto_enumTypes[0].Descriptor()
}

func (AlexaAuthState) Type() protoreflect.EnumType {
	return &file_alexa_proto_enumTypes[0]
}

func (x AlexaAuthState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlexaAuthState.Descriptor instead.
func (AlexaAuthState) EnumDescriptor() ([]byte, []int) {
	return file_alexa_proto_rawDescGZIP(), []int{0}
}

type AlexaAuthStateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlexaAuthStateRequest) Reset() {
	*x = AlexaAuthStateRequest{}
	mi := &file_alexa_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlexaAuthStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlexaAuthStateRequest) ProtoMessage() {}

func (x *AlexaAuthStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alexa_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlexaAuthStateRequest.ProtoReflect.Descriptor instead.
func (*AlexaAuthStateRequest) Descriptor() ([]byte, []int) {
	return file_alexa_proto_rawDescGZIP(), []int{0}
}

type AlexaAuthStateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *ResponseStatus        `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	AuthState     AlexaAuthState         `protobuf:"varint,2,opt,name=auth_state,json=authState,proto3,enum=Anki.Vector.external_interface.AlexaAuthState" json:"auth_state,omitempty"`
	Extra         string                 `protobuf:"bytes,3,opt,name=extra,proto3" json:"extra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlexaAuthStateResponse) Reset() {
	*x = AlexaAuthStateResponse{}
	mi := &file_alexa_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlexaAuthStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlexaAuthStateResponse) ProtoMessage() {}

func (x *AlexaAuthStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alexa_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlexaAuthStateResponse.ProtoReflect.Descriptor instead.
func (*AlexaAuthStateResponse) Descriptor() ([]byte, []int) {
	return file_alexa_proto_rawDescGZIP(), []int{1}
}

func (x *AlexaAuthStateResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *AlexaAuthStateResponse) GetAuthState() AlexaAuthState {
	if x != nil {
		return x.AuthState
	}
	return AlexaAuthState_ALEXA_AUTH_INVALID
}

func (x *AlexaAuthStateResponse) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

type AlexaOptInRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OptIn         bool                   `protobuf:"varint,1,opt,name=opt_in,json=optIn,proto3" json:"opt_in,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlexaOptInRequest) Reset() {
	*x = AlexaOptInRequest{}
	mi := &file_alexa_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlexaOptInRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlexaOptInRequest) ProtoMessage() {}

func (x *AlexaOptInRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alexa_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlexaOptInRequest.ProtoReflect.Descriptor instead.
func (*AlexaOptInRequest) Descriptor() ([]byte, []int) {
	return file_alexa_proto_rawDescGZIP(), []int{2}
}

func (x *AlexaOptInRequest) GetOptIn() bool {
	if x != nil {
		return x.OptIn
	}
	return false
}

type AlexaOptInResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *ResponseStatus        `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlexaOptInResponse) Reset() {
	*x = AlexaOptInResponse{}
	mi := &file_alexa_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlexaOptInResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlexaOptInResponse) ProtoMessage() {}

func (x *AlexaOptInResponse) ProtoReflect() protoreflect.Message {
	mi := &file_alexa_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlexaOptInResponse.ProtoReflect.Descriptor instead.
func (*AlexaOptInResponse) Descriptor() ([]byte, []int) {
	return file_alexa_proto_rawDescGZIP(), []int{3}
}

func (x *AlexaOptInResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type AlexaAuthEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AuthState     AlexaAuthState         `protobuf:"varint,1,opt,name=auth_state,json=authState,proto3,enum=Anki.Vector.external_interface.AlexaAuthState" json:"auth_state,omitempty"`
	Extra         string                 `protobuf:"bytes,2,opt,name=extra,proto3" json:"extra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlexaAuthEvent) Reset() {
	*x = AlexaAuthEvent{}
	mi := &file_alexa_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlexaAuthEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlexaAuthEvent) ProtoMessage() {}

func (x *AlexaAuthEvent) ProtoReflect() protoreflect.Message {
	mi := &file_alexa_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlexaAuthEvent.ProtoReflect.Descriptor instead.
func (*AlexaAuthEvent) Descriptor() ([]byte, []int) {
	return file_alexa_proto_rawDescGZIP(), []int{4}
}

func (x *AlexaAuthEvent) GetAuthState() AlexaAuthState {
	if x != nil {
		return x.AuthState
	}
	return AlexaAuthState_ALEXA_AUTH_INVALID
}

func (x *AlexaAuthEvent) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

var File_alexa_proto protoreflect.FileDescriptor

const file_alexa_proto_rawDesc = "" +
	"\n" +
	"\valexa.proto\x12\x1eAnki.Vector.external_interface\x1a\x15response_status.proto\"\x17\n" +
	"\x15AlexaAuthStateRequest\"\xc5\x01\n" +
	"\x16AlexaAuthStateResponse\x12F\n" +
	"\x06status\x18\x01 \x01(\v2..Anki.Vector.external_interface.ResponseStatusR\x06status\x12M\n" +
	"\n" +
	"auth_state\x18\x02 \x01(\x0e2..Anki.Vector.external_interface.AlexaAuthStateR\tauthState\x12\x14\n" +
	"\x05extra\x18\x03 \x01(\tR\x05extra\"*\n" +
	"\x11AlexaOptInRequest\x12\x15\n" +
	"\x06opt_in\x18\x01 \x01(\bR\x05optIn\"\\\n" +
	"\x12AlexaOptInResponse\x12F\n" +
	"\x06status\x18\x01 \x01(\v2..Anki.Vector.external_interface.ResponseStatusR\x06status\"u\n" +
	"\x0eAlexaAuthEvent\x12M\n" +
	"\n" +
	"auth_state\x18\x01 \x01(\x0e2..Anki.Vector.external_interface.AlexaAuthStateR\tauthState\x12\x14\n" +
	"\x05extra\x18\x02 \x01(\tR\x05extra*\xa2\x01\n" +
	"\x0eAlexaAuthState\x12\x16\n" +
	"\x12ALEXA_AUTH_INVALID\x10\x00\x12\x1c\n" +
	"\x18ALEXA_AUTH_UNINITIALIZED\x10\x01\x12\x1e\n" +
	"\x1aALEXA_AUTH_REQUESTING_AUTH\x10\x02\x12\x1f\n" +
	"\x1bALEXA_AUTH_WAITING_FOR_CODE\x10\x03\x12\x19\n" +
	"\x15ALEXA_AUTH_AUTHORIZED\x10\x04B Z\x1eAnki.Vector.external_interfaceb\x06proto3"

var (
	file_alexa_proto_rawDescOnce sync.Once
	file_alexa_proto_rawDescData []byte
)

func file_alexa_proto_rawDescGZIP() []byte {
	file_alexa_proto_rawDescOnce.Do(func() {
		file_alexa_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_alexa_proto_rawDesc), len(file_alexa_proto_rawDesc)))
	})
	return file_alexa_proto_rawDescData
}

var file_alexa_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_alexa_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_alexa_proto_goTypes = []any{
	(AlexaAuthState)(0),            // 0: Anki.Vector.external_interface.AlexaAuthState
	(*AlexaAuthStateRequest)(nil),  // 1: Anki.Vector.external_interface.AlexaAuthStateRequest
	(*AlexaAuthStateResponse)(nil), // 2: Anki.Vector.external_interface.AlexaAuthStateResponse
	(*AlexaOptInRequest)(nil),      // 3: Anki.Vector.external_interface.AlexaOptInRequest
	(*AlexaOptInResponse)(nil),     // 4: Anki.Vector.external_interface.AlexaOptInResponse
	(*AlexaAuthEvent)(nil),         // 5: Anki.Vector.external_interface.AlexaAuthEvent
	(*ResponseStatus)(nil),         // 6: Anki.Vector.external_interface.ResponseStatus
}
var file_alexa_proto_depIdxs = []int32{
	6, // 0: Anki.Vector.external_interface.AlexaAuthStateResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	0, // 1: Anki.Vector.external_interface.AlexaAuthStateResponse.auth_state:type_name -> Anki.Vector.external_interface.AlexaAuthState
	6, // 2: Anki.Vector.external_interface.AlexaOptInResponse.status:type_name -> Anki.Vector.external_interface.ResponseStatus
	0, // 3: Anki.Vector.external_interface.AlexaAuthEvent.auth_state:type_name -> Anki.Vector.external_interface.AlexaAuthState
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_alexa_proto_init() }
func file_alexa_proto_init() {
	if File_alexa_proto != nil {
		return
	}
	file_response_status_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_alexa_proto_rawDesc), len(file_alexa_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_alexa_proto_goTypes,
		DependencyIndexes: file_alexa_proto_depIdxs,
		EnumInfos:         file_alexa_proto_enumTypes,
		MessageInfos:      file_alexa_proto_msgTypes,
	}.Build()
	File_alexa_proto = out.File
	file_alexa_proto_goTypes = nil
	file_alexa_proto_depIdxs = nil
}
